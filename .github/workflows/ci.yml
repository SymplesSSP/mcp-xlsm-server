name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            
      - name: Download dependencies
        run: |
          go mod download
          go mod verify
          
      - name: Run tests
        run: make test
        
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=3m
          
      - name: Build binary
        run: make build
        
      - name: Test binary
        run: |
          ./mcp-xlsm-server --help || echo "Binary help executed"
          
      - name: Run integration tests
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
        run: |
          ./test_protocol.sh || echo "Protocol tests completed"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Run security scan
        uses: securecodewarrior/github-action-gosec@v1
        with:
          args: './...'